#!/bin/bash

kf=~/Downloads/tac-k8s-config
saname=rosa

cat > $kf <<EOF
apiVersion: v1
kind: Config
preferences: {}
clusters:
- cluster:
  name: c1
users:
- name: $saname
contexts:
- context:
  name: ctxt1
EOF

cat <<EOF | kubectl apply -f -
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: reader
rules:
  - apiGroups: ["", "extensions", "apps"]
    resources: ["*"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create"]
  - apiGroups: ["apps"]
    resources: ["deployments/scale"]
    verbs: ["patch"]
EOF

cat <<EOF | kubectl apply -f -
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ${saname}-reader-binding
subjects:
  - kind: ServiceAccount
    name: $saname
    apiGroup: ""
    namespace: default
roleRef:
  kind: ClusterRole
  name: reader
  apiGroup: ""
EOF


kubectl create serviceaccount $saname
secret=$(kubectl get secret -o json | jq -r ".items[] | select(.metadata.annotations.\"kubernetes.io/service-account.name\"==\"${saname}\") | .metadata.name")
token=$(kubectl get secret $secret -o json | jq -r '.data.token' | base64 -D)

api=$(TERM=dumb kubectl cluster-info | awk '/Kubernetes master/ { print $6;}')

export KUBECONFIG=$kf
kubectl config set-cluster c1 --server=${api} --insecure-skip-tls-verify
kubectl config set-credentials $saname --token $token
kubectl config set-context ctxt1 --cluster=c1 --user=$saname
kubectl config use-context ctxt1
echo testing
kubectl get nodes
